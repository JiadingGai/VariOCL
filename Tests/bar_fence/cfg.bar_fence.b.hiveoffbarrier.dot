digraph "CFG for 'bar_fence' function" {
	label="CFG for 'bar_fence' function";

	Node0x1880720 [shape=record,label="{entry.barrier:\l  call void @barrier(i32 0)\l  br label %entry\l}"];
	Node0x1880720 -> Node0x1881190;
	Node0x1881190 [shape=record,label="{entry:                                            \l  %call = call i32 @get_group_id(i32 0) #2\l  %call1 = call i32 @get_local_id(i32 0) #2\l  %call2 = call i32 @get_local_size(i32 0) #2\l  %mul = mul nsw i32 %call, 10000\l  %mul3 = mul nsw i32 %call1, 100\l  %add = add nsw i32 %mul, %mul3\l  br label %for.cond\l}"];
	Node0x1881190 -> Node0x1881d10;
	Node0x1881d10 [shape=record,label="{for.cond:                                         \l  %sum.0 = phi i32 [ 0, %entry ], [ %add4, %for.inc ]\l  %start.0 = phi i32 [ %add, %entry ], [ %inc, %for.inc ]\l  %i.0 = phi i32 [ 0, %entry ], [ %inc5, %for.inc ]\l  %cmp = icmp slt i32 %i.0, 100\l  br i1 %cmp, label %for.body, label %for.end.mxpa.b4.barrier\l|{<s0>T|<s1>F}}"];
	Node0x1881d10:s0 -> Node0x18825c0;
	Node0x1881d10:s1 -> Node0x18826d0;
	Node0x18825c0 [shape=record,label="{for.body:                                         \l  br label %for.inc\l}"];
	Node0x18825c0 -> Node0x1881ed0;
	Node0x1881ed0 [shape=record,label="{for.inc:                                          \l  %inc = add nsw i32 %start.0, 1\l  %add4 = add nsw i32 %sum.0, %start.0\l  %inc5 = add nsw i32 %i.0, 1\l  br label %for.cond\l}"];
	Node0x1881ed0 -> Node0x1881d10;
	Node0x18826d0 [shape=record,label="{for.end.mxpa.b4.barrier:                          \l  %idxprom = sext i32 %call1 to i64\l  %arrayidx = getelementptr inbounds i32* %sum_per_wi, i64 %idxprom\l  store i32 %sum.0, i32* %arrayidx, align 4\l  br label %for.end\l}"];
	Node0x18826d0 -> Node0x1882d10;
	Node0x1882d10 [shape=record,label="{for.end:                                          \l  call void @barrier(i32 1) #2\l  br label %for.end.mxpa.after.barrier\l}"];
	Node0x1882d10 -> Node0x18830b0;
	Node0x18830b0 [shape=record,label="{for.end.mxpa.after.barrier:                       \l  %cmp6 = icmp eq i32 %call1, 0\l  br i1 %cmp6, label %if.then, label %if.end.mxpa.b4.barrier\l|{<s0>T|<s1>F}}"];
	Node0x18830b0:s0 -> Node0x1883220;
	Node0x18830b0:s1 -> Node0x18832a0;
	Node0x1883220 [shape=record,label="{if.then:                                          \l  br label %for.cond9\l}"];
	Node0x1883220 -> Node0x18833b0;
	Node0x18833b0 [shape=record,label="{for.cond9:                                        \l  %tmp.0 = phi i32 [ 0, %if.then ], [ %add14, %for.inc15 ]\l  %i8.0 = phi i32 [ 0, %if.then ], [ %inc16, %for.inc15 ]\l  %cmp10 = icmp slt i32 %i8.0, %call2\l  br i1 %cmp10, label %for.body11, label %for.end17\l|{<s0>T|<s1>F}}"];
	Node0x18833b0:s0 -> Node0x1883800;
	Node0x18833b0:s1 -> Node0x18838e0;
	Node0x1883800 [shape=record,label="{for.body11:                                       \l  br label %for.inc15\l}"];
	Node0x1883800 -> Node0x18834b0;
	Node0x18834b0 [shape=record,label="{for.inc15:                                        \l  %idxprom12 = sext i32 %i8.0 to i64\l  %arrayidx13 = getelementptr inbounds i32* %sum_per_wi, i64 %idxprom12\l  %0 = load i32* %arrayidx13, align 4\l  %add14 = add nsw i32 %tmp.0, %0\l  %inc16 = add nsw i32 %i8.0, 1\l  br label %for.cond9\l}"];
	Node0x18834b0 -> Node0x18833b0;
	Node0x18838e0 [shape=record,label="{for.end17:                                        \l  %idxprom18 = sext i32 %call to i64\l  %arrayidx19 = getelementptr inbounds i32* %sum_wg, i64 %idxprom18\l  store i32 %tmp.0, i32* %arrayidx19, align 4\l  br label %if.end.mxpa.b4.barrier\l}"];
	Node0x18838e0 -> Node0x18832a0;
	Node0x18832a0 [shape=record,label="{if.end.mxpa.b4.barrier:                           \l  br label %if.end\l}"];
	Node0x18832a0 -> Node0x18840e0;
	Node0x18840e0 [shape=record,label="{if.end:                                           \l  call void @barrier(i32 1) #2\l  br label %if.end.mxpa.after.barrier\l}"];
	Node0x18840e0 -> Node0x18842c0;
	Node0x18842c0 [shape=record,label="{if.end.mxpa.after.barrier:                        \l  %cmp20 = icmp eq i32 %call, 0\l  br i1 %cmp20, label %if.then21, label %if.end34\l|{<s0>T|<s1>F}}"];
	Node0x18842c0:s0 -> Node0x1884430;
	Node0x18842c0:s1 -> Node0x1884490;
	Node0x1884430 [shape=record,label="{if.then21:                                        \l  br label %for.cond25\l}"];
	Node0x1884430 -> Node0x18845d0;
	Node0x18845d0 [shape=record,label="{for.cond25:                                       \l  %final.0 = phi i32 [ 0, %if.then21 ], [ %add30, %for.inc31 ]\l  %i24.0 = phi i32 [ 0, %if.then21 ], [ %inc32, %for.inc31 ]\l  %cmp26 = icmp slt i32 %i24.0, 1\l  br i1 %cmp26, label %for.body27, label %for.end33\l|{<s0>T|<s1>F}}"];
	Node0x18845d0:s0 -> Node0x1884e10;
	Node0x18845d0:s1 -> Node0x1884ea0;
	Node0x1884e10 [shape=record,label="{for.body27:                                       \l  br label %for.inc31\l}"];
	Node0x1884e10 -> Node0x1884760;
	Node0x1884760 [shape=record,label="{for.inc31:                                        \l  %idxprom28 = sext i32 %i24.0 to i64\l  %arrayidx29 = getelementptr inbounds i32* %sum_wg, i64 %idxprom28\l  %1 = load i32* %arrayidx29, align 4\l  %add30 = add nsw i32 %final.0, %1\l  %inc32 = add nsw i32 %i24.0, 1\l  br label %for.cond25\l}"];
	Node0x1884760 -> Node0x18845d0;
	Node0x1884ea0 [shape=record,label="{for.end33:                                        \l  store i32 %final.0, i32* %Sum_final, align 4\l  br label %if.end34\l}"];
	Node0x1884ea0 -> Node0x1884490;
	Node0x1884490 [shape=record,label="{if.end34:                                         \l  br label %exit.barrier.mxpa.b4.barrier\l}"];
	Node0x1884490 -> Node0x1885560;
	Node0x1885560 [shape=record,label="{exit.barrier.mxpa.b4.barrier:                     \l  br label %exit.barrier\l}"];
	Node0x1885560 -> Node0x1885640;
	Node0x1885640 [shape=record,label="{exit.barrier:                                     \l  call void @barrier(i32 0)\l  ret void\l}"];
}
