digraph "CFG for 'test_fn' function" {
	label="CFG for 'test_fn' function";

	Node0x2ee7500 [shape=record,label="{entry.barrier:\l  call void @barrier(i32 0)\l  br label %entry\l}"];
	Node0x2ee7500 -> Node0x2ee76f0;
	Node0x2ee76f0 [shape=record,label="{entry:                                            \l  %call = call i32 @get_global_id(i32 0) #2\l  %call1 = call i32 @get_local_id(i32 0) #2\l  %cmp = icmp eq i32 %call1, 0\l  br i1 %cmp, label %if.then, label %if.end.mxpa.b4.barrier\l|{<s0>T|<s1>F}}"];
	Node0x2ee76f0:s0 -> Node0x2ee7d70;
	Node0x2ee76f0:s1 -> Node0x2ee7e70;
	Node0x2ee7d70 [shape=record,label="{if.then:                                          \l  br label %for.cond\l}"];
	Node0x2ee7d70 -> Node0x2ee7ff0;
	Node0x2ee7ff0 [shape=record,label="{for.cond:                                         \l  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]\l  %cmp2 = icmp slt i32 %i.0, 256\l  br i1 %cmp2, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x2ee7ff0:s0 -> Node0x2ee8540;
	Node0x2ee7ff0:s1 -> Node0x2ee8640;
	Node0x2ee8540 [shape=record,label="{for.body:                                         \l  %idxprom = sext i32 %i.0 to i64\l  %arrayidx = getelementptr inbounds \<8 x i32\>* %src, i64 %idxprom\l  %0 = load \<8 x i32\>* %arrayidx, align 32\l  %idxprom3 = sext i32 %i.0 to i64\l  %arrayidx4 = getelementptr inbounds \<8 x i32\>* %sSharedStorage, i64 %idxprom3\l  store \<8 x i32\> %0, \<8 x i32\>* %arrayidx4, align 32\l  br label %for.inc\l}"];
	Node0x2ee8540 -> Node0x2ee8240;
	Node0x2ee8240 [shape=record,label="{for.inc:                                          \l  %inc = add nsw i32 %i.0, 1\l  br label %for.cond\l}"];
	Node0x2ee8240 -> Node0x2ee7ff0;
	Node0x2ee8640 [shape=record,label="{for.end:                                          \l  br label %if.end.mxpa.b4.barrier\l}"];
	Node0x2ee8640 -> Node0x2ee7e70;
	Node0x2ee7e70 [shape=record,label="{if.end.mxpa.b4.barrier:                           \l  br label %if.end\l}"];
	Node0x2ee7e70 -> Node0x2ee7400;
	Node0x2ee7400 [shape=record,label="{if.end:                                           \l  call void @barrier(i32 1) #2\l  br label %if.end.mxpa.after.barrier\l}"];
	Node0x2ee7400 -> Node0x2ee8f60;
	Node0x2ee8f60 [shape=record,label="{if.end.mxpa.after.barrier:                        \l  %idxprom5 = sext i32 %call to i64\l  %arrayidx6 = getelementptr inbounds i32* %offsets, i64 %idxprom5\l  %1 = load i32* %arrayidx6, align 4\l  %idxprom7 = sext i32 %call to i64\l  %arrayidx8 = getelementptr inbounds i32* %alignmentOffsets, i64 %idxprom7\l  %2 = load i32* %arrayidx8, align 4\l  %idx.ext = zext i32 %2 to i64\l  %add.ptr = getelementptr inbounds \<8 x i32\>* %sSharedStorage, i64 0, i64\l... %idx.ext\l  %call9 = call \<8 x i32\> @vload8(i32 %1, i32* %add.ptr) #2\l  %idxprom10 = sext i32 %call to i64\l  %arrayidx11 = getelementptr inbounds \<8 x i32\>* %results, i64 %idxprom10\l  store \<8 x i32\> %call9, \<8 x i32\>* %arrayidx11, align 32\l  br label %exit.barrier.mxpa.b4.barrier\l}"];
	Node0x2ee8f60 -> Node0x2ee9af0;
	Node0x2ee9af0 [shape=record,label="{exit.barrier.mxpa.b4.barrier:                     \l  br label %exit.barrier\l}"];
	Node0x2ee9af0 -> Node0x2ee9c10;
	Node0x2ee9c10 [shape=record,label="{exit.barrier:                                     \l  call void @barrier(i32 0)\l  ret void\l}"];
}
